<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Facebook" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.3.1.23. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="sec-gpc" elementType="Header">
            <stringProp name="Header.name">sec-gpc</stringProp>
            <stringProp name="Header.value">1</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua</stringProp>
            <stringProp name="Header.value">&quot;Google Chrome&quot;;v=&quot;113&quot;, &quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-mobile" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-mobile</stringProp>
            <stringProp name="Header.value">?0</stringProp>
          </elementProp>
          <elementProp name="sec-ch-ua-platform" elementType="Header">
            <stringProp name="Header.name">sec-ch-ua-platform</stringProp>
            <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="dnt" elementType="Header">
            <stringProp name="Header.name">dnt</stringProp>
            <stringProp name="Header.value">1</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">www.facebook.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.facebook.com/login.php" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">login.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">cross-site</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-User" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                  <stringProp name="Header.value">?1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">document</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">0.0</stringProp>
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.facebook.com/ajax/bz?__a=1&amp;__ccg=EXCELLENT&amp;__dyn=7xe6E5aQ1PyUbFuC1swgE98nwgU29zEdEc8uwdK0lW4o3Bw5VCwjE3awbG78b87C0yE7i0n24o5-0me2218w5uw5Uwdq0Ho2ew4Kw5rwSyE1582ZwrU19E36w&amp;__hs=19518.BP%3ADEFAULT.2.0..0.0&amp;__hsi=7242956406371529833&amp;__req=1&amp;__rev=1007659491&amp;__s=qh9pnm%3Awsolpo%3Asczcyq&amp;__spin_b=trunk&amp;__spin_r=1007659491&amp;__spin_t=1686382202&amp;__user=0&amp;dpr=1&amp;jazoest=21044&amp;lsd=AVrucRNgTaw" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__a</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__ccg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__ccg</stringProp>
                  <stringProp name="Argument.value">EXCELLENT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__rev" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__rev</stringProp>
                  <stringProp name="Argument.value">1007659491</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__user" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__user</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__hs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__hs</stringProp>
                  <stringProp name="Argument.value">19518.BP:DEFAULT.2.0..0.0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dpr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dpr</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__spin_r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__spin_r</stringProp>
                  <stringProp name="Argument.value">1007659491</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__spin_t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__spin_t</stringProp>
                  <stringProp name="Argument.value">1686382202</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__s" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__s</stringProp>
                  <stringProp name="Argument.value">qh9pnm:wsolpo:sczcyq</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__hsi" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__hsi</stringProp>
                  <stringProp name="Argument.value">7242956406371529833</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__req" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__req</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lsd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lsd</stringProp>
                  <stringProp name="Argument.value">AVrucRNgTaw</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__spin_b" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__spin_b</stringProp>
                  <stringProp name="Argument.value">trunk</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__dyn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__dyn</stringProp>
                  <stringProp name="Argument.value">7xe6E5aQ1PyUbFuC1swgE98nwgU29zEdEc8uwdK0lW4o3Bw5VCwjE3awbG78b87C0yE7i0n24o5-0me2218w5uw5Uwdq0Ho2ew4Kw5rwSyE1582ZwrU19E36w</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jazoest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">jazoest</stringProp>
                  <stringProp name="Argument.value">21044</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">[{&quot;user&quot;:&quot;0&quot;,&quot;webSessionId&quot;:&quot;qh9pnm:wsolpo:sczcyq&quot;,&quot;app_id&quot;:&quot;256281040558&quot;,&quot;posts&quot;:[[&quot;falco:bd_pdc_signals&quot;,{&quot;e&quot;:&quot;{\&quot;asid\&quot;:\&quot;f4eeaa25-bd94-4e95-a284-270f26221b7b\&quot;,\&quot;ct\&quot;:1659080345,\&quot;sjd\&quot;:\&quot;UaMc/rvnefIWp0I82V/VAyhR/oxF2EMg1BcV6U+nBrqAzW7eEUVtWDdiq/VORAoaOepRKSYV0gusu9qbsSF09A37v/+h9KCQf+lyp3gs/Ns/Ik/mlhnrarGwUdJ6MqYUfpX+euz1tDoeOjB2oEQlK6GEmtB/WWGXO3fRvkPcMCk=\&quot;,\&quot;sid\&quot;:-1}&quot;,&quot;r&quot;:1,&quot;d&quot;:&quot;$^|Acaz_j9EHEM4k06Yt2k7JCbb6tYQ1fZSxFRb7pztvz96V_X9qhyGPd1iv0Rv8mDfiM7GH1NqwBYKmMvpK1aPK96hXFiAQjVA-MZIvJyuRLVSz4l0ccXavv6tNxglyQ7BoVtYUnOaPRGXhL0wS2pkaurvP0Cz4r8|fd.AcZL7dgr2Gztwd9xMPAZvxn1cRm2iKt8CzWrJQMa338RjGKvb7dALCT45CMsJdx-bRH8Nf0nkRL60kseTSIE4DQy&quot;,&quot;s&quot;:&quot;qh9pnm:wsolpo:sczcyq&quot;,&quot;t&quot;:1686382204124.1},1686382204145.5,0,587]],&quot;trigger&quot;:&quot;falco:bd_pdc_signals&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ts</stringProp>
                  <stringProp name="Argument.value">1686382204146</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ajax/bz</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryF2p4plRM9BJfsmA9</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.facebook.com/ajax/bz?__a=1&amp;__ccg=EXCELLENT&amp;__dyn=7xe6E5aQ1PyUbFuC1swgE98nwgU29zEdEc8uwdK0lW4o3Bw5VCwjE3awbG78b87C0yE7i0n24o5-0me2218w5uw5Uwdq0Ho2ew4Kw5rwSyE1582ZwrU19E36w&amp;__hs=19518.BP%3ADEFAULT.2.0..0.0&amp;__hsi=7242956406371529833&amp;__req=2&amp;__rev=1007659491&amp;__s=qh9pnm%3Awsolpo%3Asczcyq&amp;__spin_b=trunk&amp;__spin_r=1007659491&amp;__spin_t=1686382202&amp;__user=0&amp;dpr=1&amp;jazoest=21044&amp;lsd=AVrucRNgTaw" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="__a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__a</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__ccg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__ccg</stringProp>
                  <stringProp name="Argument.value">EXCELLENT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__rev" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__rev</stringProp>
                  <stringProp name="Argument.value">1007659491</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__user" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__user</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__hs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__hs</stringProp>
                  <stringProp name="Argument.value">19518.BP:DEFAULT.2.0..0.0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dpr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dpr</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__spin_r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__spin_r</stringProp>
                  <stringProp name="Argument.value">1007659491</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__spin_t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__spin_t</stringProp>
                  <stringProp name="Argument.value">1686382202</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__s" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">__s</stringProp>
                  <stringProp name="Argument.value">qh9pnm:wsolpo:sczcyq</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__hsi" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__hsi</stringProp>
                  <stringProp name="Argument.value">7242956406371529833</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="__req" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__req</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lsd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lsd</stringProp>
                  <stringProp name="Argument.value">AVrucRNgTaw</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__spin_b" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__spin_b</stringProp>
                  <stringProp name="Argument.value">trunk</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="__dyn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">__dyn</stringProp>
                  <stringProp name="Argument.value">7xe6E5aQ1PyUbFuC1swgE98nwgU29zEdEc8uwdK0lW4o3Bw5VCwjE3awbG78b87C0yE7i0n24o5-0me2218w5uw5Uwdq0Ho2ew4Kw5rwSyE1582ZwrU19E36w</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jazoest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">jazoest</stringProp>
                  <stringProp name="Argument.value">21044</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="q" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">q</stringProp>
                  <stringProp name="Argument.value">[{&quot;app_id&quot;:&quot;256281040558&quot;,&quot;posts&quot;:[[&quot;require_cond_exposure_logging&quot;,{&quot;identifier&quot;:&quot;Aa3xf-b7wOshV3a6m8JmRjHO6NbQWkur6r6hDil9EFV-syGFcKwLY6KQWHI5r4qXskv164RNtrASby7bLYm63KQ&quot;},1686382204144.3,0,104],[&quot;require_cond_exposure_logging&quot;,{&quot;identifier&quot;:&quot;Aa0qB8aPrPM0fLV5GHUifzmAvA84e9i59PDUI4YykJ7HP-j38VJ2B3394V5MDNxcZan6IPI5i5yjwffRg3nZrpHQ-1c&quot;},1686382204145.2,0,108],[&quot;gk2_exposure&quot;,{&quot;identifier&quot;:&quot;1073500&quot;,&quot;hash&quot;:&quot;AT7aJmfnqWyioxOOtsg&quot;},1686382204145.3,0,53],[&quot;require_cond_exposure_logging&quot;,{&quot;identifier&quot;:&quot;Aa18ybirn4LqWRI0LvKGnie6YY-KQA-G7FVwOpP3hw87abwRJJ7-FryLSEoITQisQ_h_huuzkdnXSgM-TyfhjrU&quot;},1686382204145.3,0,104],[&quot;gk2_exposure&quot;,{&quot;identifier&quot;:&quot;708253&quot;,&quot;hash&quot;:&quot;AT5n4hBL3YTMnQWtnsU&quot;},1686382204145.4,0,52],[&quot;gk2_exposure&quot;,{&quot;identifier&quot;:&quot;676837&quot;,&quot;hash&quot;:&quot;AT4N8wBZA8ctCdHwDfk&quot;},1686382204145.4,0,52],[&quot;require_cond_exposure_logging&quot;,{&quot;identifier&quot;:&quot;Aa0fP7HPr4mOKMaDNXDdkqEhwgXGZf1DR8cI_RkbWpzeUDHqoy6C4x5uX-q1jTb8p80VVenGok7pguWEeALZjfi2kZ-NHA&quot;},1686382204145.5,0,111],[&quot;gk2_exposure&quot;,{&quot;identifier&quot;:&quot;1099893&quot;,&quot;hash&quot;:&quot;AT5kly2LSZV_DKGRjHM&quot;},1686382204145.5,0,53],[&quot;require_cond_exposure_logging&quot;,{&quot;identifier&quot;:&quot;Aa0cIRk-wM268gX4PnsnXnFm9-MmebVV-sZkJMQk1fT0GjUw2tfH8OWrg7PzJy209se0CUYHUKnXSFyuFXcerKSt0Vg&quot;},1686382204145.5,0,108],[&quot;falco:web_blue_time_spent_navigation&quot;,{&quot;e&quot;:&quot;{\&quot;json_data\&quot;:\&quot;{\\\&quot;source_path\\\&quot;:null,\\\&quot;source_token\\\&quot;:null,\\\&quot;dest_path\\\&quot;:\\\&quot;XWebLoginController\\\&quot;,\\\&quot;dest_token\\\&quot;:\\\&quot;96e88af3\\\&quot;,\\\&quot;impression_id\\\&quot;:\\\&quot;0NZ0TuHIvH6LXDGcz\\\&quot;,\\\&quot;cause\\\&quot;:\\\&quot;load\\\&quot;,\\\&quot;sid_raw\\\&quot;:\\\&quot;qh9pnm:wsolpo:sczcyq\\\&quot;,\\\&quot;referrer\\\&quot;:\\\&quot;https://in.search.yahoo.com/\\\&quot;,\\\&quot;dest_ef_page\\\&quot;:null,\\\&quot;dest_uri\\\&quot;:\\\&quot;https://www.facebook.com/login.php\\\&quot;}\&quot;}&quot;,&quot;r&quot;:1,&quot;d&quot;:&quot;$^|Acaz_j9EHEM4k06Yt2k7JCbb6tYQ1fZSxFRb7pztvz96V_X9qhyGPd1iv0Rv8mDfiM7GH1NqwBYKmMvpK1aPK96hXFiAQjVA-MZIvJyuRLVSz4l0ccXavv6tNxglyQ7BoVtYUnOaPRGXhL0wS2pkaurvP0Cz4r8|fd.AcZL7dgr2Gztwd9xMPAZvxn1cRm2iKt8CzWrJQMa338RjGKvb7dALCT45CMsJdx-bRH8Nf0nkRL60kseTSIE4DQy&quot;,&quot;s&quot;:&quot;qh9pnm:wsolpo:sczcyq&quot;,&quot;t&quot;:1686382204156.4},1686382204156.9,0,736],[&quot;falco:web_perf_device_info_log&quot;,{&quot;e&quot;:&quot;{\&quot;cpu_cores\&quot;:8,\&quot;ram\&quot;:8,\&quot;gpu_renderer\&quot;:\&quot;ANGLE (AMD, AMD Radeon(TM) RX Vega 10 Graphics Direct3D11 vs_5_0 ps_5_0, D3D11)\&quot;,\&quot;gpu_vendor\&quot;:\&quot;Google Inc. (AMD)\&quot;}&quot;,&quot;r&quot;:1,&quot;d&quot;:&quot;$^|Acaz_j9EHEM4k06Yt2k7JCbb6tYQ1fZSxFRb7pztvz96V_X9qhyGPd1iv0Rv8mDfiM7GH1NqwBYKmMvpK1aPK96hXFiAQjVA-MZIvJyuRLVSz4l0ccXavv6tNxglyQ7BoVtYUnOaPRGXhL0wS2pkaurvP0Cz4r8|fd.AcZL7dgr2Gztwd9xMPAZvxn1cRm2iKt8CzWrJQMa338RjGKvb7dALCT45CMsJdx-bRH8Nf0nkRL60kseTSIE4DQy&quot;,&quot;s&quot;:&quot;qh9pnm:wsolpo:sczcyq&quot;,&quot;t&quot;:1686382204252.1},1686382204252.7,0,487],[&quot;falco:bd_pdc_signals&quot;,{&quot;e&quot;:&quot;{\&quot;asid\&quot;:\&quot;f4eeaa25-bd94-4e95-a284-270f26221b7b\&quot;,\&quot;ct\&quot;:1659080345,\&quot;sjd\&quot;:\&quot;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\&quot;,\&quot;sid\&quot;:-1}&quot;,&quot;r&quot;:1,&quot;d&quot;:&quot;$^|Acaz_j9EHEM4k06Yt2k7JCbb6tYQ1fZSxFRb7pztvz96V_X9qhyGPd1iv0Rv8mDfiM7GH1NqwBYKmMvpK1aPK96hXFiAQjVA-MZIvJyuRLVSz4l0ccXavv6tNxglyQ7BoVtYUnOaPRGXhL0wS2pkaurvP0Cz4r8|fd.AcZL7dgr2Gztwd9xMPAZvxn1cRm2iKt8CzWrJQMa338RjGKvb7dALCT45CMsJdx-bRH8Nf0nkRL60kseTSIE4DQy&quot;,&quot;s&quot;:&quot;qh9pnm:wsolpo:sczcyq&quot;,&quot;t&quot;:1686382204278.5},1686382204278.9,0,2795]],&quot;user&quot;:&quot;0&quot;,&quot;webSessionId&quot;:&quot;qh9pnm:wsolpo:sczcyq&quot;,&quot;trigger&quot;:&quot;falco:web_blue_time_spent_navigation&quot;,&quot;send_method&quot;:&quot;ajax&quot;,&quot;compression&quot;:&quot;&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ts</stringProp>
                  <stringProp name="Argument.value">1686382205174</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ajax/bz</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryQAEvBi2JKd4jkBu6</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
